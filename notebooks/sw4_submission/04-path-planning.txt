1. What would happen if the Duckiebot was placed in an environment with very small obstacles? Would RRT be able to avoid them? Which parameters would you need to adjust, and what would be the side effects?
    - It will be able to, as long as path_res is adjusted accordingly. If the obstacles are small and path_res is too big, the obstacles might be skipped when doing collision check, and as a result the robot may crash into it although the collision checker reports that there is no collision within the path. As a side effect, the computation needed to perform collision checking may increase as it needs to run more check iterations. 


2. Is it needed to re-plan everytime the first path point is reached? In which situation would it be important? What are the advantages and disadvantages of doing so?
    - No it is not needed to replan everytime the first path point is reached, although there are some disadvantages that we need to be aware if we choose not to replan.
    - It will be especially important to replan for example if the environment is dynamic (e.g., collision objects are moving) or if we are dealing with partial observability (e.g., if we are not sure where the collision objects are initially, it is better to replan if the agent has learned something new about the environment)
    - The advantage of not having to replan at every time step is to save computation power. However, this can usually only be done if we know the environment is static and if we know where the obstacles are.
    - Another advantage of replanning is to see if we can find a better (e.g., shorter) path to reach the goal (assuming we can compare the old and the new path)
    - One of the disadvantages to not replan is that if the agent can only reach the target/waypoint within some epsilon ball/tolerance, then the agent is no longer within the collision-free path. In fact, this is what we see in the second part of this assignment, where we see the agent sometimes crashes as a result of not exactly reaching the waypoint and being on a slightly deviated path from one that is collision free.
    - Another disadvantage is that because RRT is not optimal, to not replan means we have to stick with a suboptimal path.
    

3. While this algorithm works, it can definitely be improved in safety, computation efficiency and time to reach the objective. Describe one improvement that could be implemented for each of these aspects.
    - Safety: (1) be more conservative about the size of the obstacle and the size of the agent (e.g., make it as if they are bigger than they actually are), (2) in the case of dynamic obstacles, it is beneficial if we can model the motion of the obstacles so we can predict where the obstacles might be in future time steps, and plan accordingly
    - Computation efficiency: (1) use some sort of informed sampling strategy to improve sampling efficiency, (2) introduce agent's belief about the world that will help the agent to decide whether to replan or not at every time step as it observes more about the environment, (3) if the environment is known, swath computation can be computed offline and set of swaths can be represented as a lookup table, so collision checking can be performed faster through the lookup table
    - Time to reach goal: (1) if agent has access to compute the shortest path from its current location to the end goal, find plan that is closest to this shortest path, (2) more advanced controller instead of two-steps approaches (e.g., turn first, then move forward after), for example the path can be parametrized as a splines, and one can try to use MPC-like controller so that the movement of the robot is smoother